package gui.clientes;

import gui.clientes.*;
import dataBase.dao.CredencialDAO;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import tools.UtilsTable;


public class AddCredenciales extends javax.swing.JDialog {
    // Para agregar el paises
    int credencial_id;
    CredencialDAO credencial_dao;
    // Para listar todos los paises 
    Object lista_credenciales [][];  // Id, fecha de renovacion
   // public Object film[];
    java.awt.Frame parent;    

    /**
     * Creates new form ???
     * @param parent
     * @param modal
     */
    public AddCredenciales(java.awt.Frame parent, boolean modal) {
        // ventana modal
        super(parent, modal);   // Llama al constructor del padre
        this.parent= parent;
        setTitle("Fecha de Renovación");
        // inicia los componentes
        initComponents();
        // Crea el dao
        credencial_dao = new CredencialDAO();
        // llena la tabla
        LlenaTabla();
    }
    
    // ? ? ? 
    public void SetPaisId(int id_credencial){   
        // Asigna el id del libro
        this.credencial_id = id_credencial;
        txtFiltro.setText("");
        LlenaTabla();
    }
    
    // Llena y despliega la tabla de autores 
    private void LlenaTabla(){     
        // Consulta todos los autores (id, nombre apellido)
        lista_credenciales = credencial_dao.GetCredencialesByNombre(txtFiltro.getText().trim());
        // Titulos de la tabla
        String[] T_CREDENCIAL = {"","Fecha de Renovación"};
        // alineación de las celdas
        int[][] cellAlignment = {{0,javax.swing.SwingConstants.LEFT}};
        // Tamaño de las celdas
        int[][] cellSize = {{0,0},
                            {1,170}};
        /*
            Metodo que llena las tablas, recibe la tabla, los datos, los titulos,
            la alineación y el tamaño de las celdas
        */
       
        UtilsTable.llenaTabla(tableList,lista_credenciales, T_CREDENCIAL, cellAlignment, cellSize);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTableList = new javax.swing.JPanel();
        scpTableList = new javax.swing.JScrollPane();
        tableList = new javax.swing.JTable();
        txtFiltro = new javax.swing.JTextField();
        lblFiltro = new javax.swing.JLabel();
        btnNewCredencial = new javax.swing.JButton();
        btnDelCredencial = new javax.swing.JButton();
        btnEditCredencial = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage( getClass().getResource("/img/user_icon.png")));

        pnlTableList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 16))); // NOI18N
        pnlTableList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scpTableList.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scpTableList.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tableList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tableList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableListMouseClicked(evt);
            }
        });
        scpTableList.setViewportView(tableList);

        pnlTableList.add(scpTableList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 180, 170));

        txtFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });
        pnlTableList.add(txtFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 140, 25));

        lblFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblFiltro.setText("Filtrar:");
        pnlTableList.add(lblFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 25));

        btnNewCredencial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/add.png"))); // NOI18N
        btnNewCredencial.setToolTipText("Registrar nuevo idioma");
        btnNewCredencial.setFocusable(false);
        btnNewCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewCredencialActionPerformed(evt);
            }
        });

        btnDelCredencial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/borrar.png"))); // NOI18N
        btnDelCredencial.setToolTipText("Borrar idioma");
        btnDelCredencial.setFocusable(false);
        btnDelCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelCredencialActionPerformed(evt);
            }
        });

        btnEditCredencial.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/editar.png"))); // NOI18N
        btnEditCredencial.setToolTipText("Editar idioma");
        btnEditCredencial.setFocusable(false);
        btnEditCredencial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditCredencialActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnNewCredencial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(btnEditCredencial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(btnDelCredencial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewCredencial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelCredencial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditCredencial, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Hacer doble click no hace nada
    private void tableListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableListMouseClicked
       
    }//GEN-LAST:event_tableListMouseClicked

    // Abre una ventana que posibilida crear un PAIS
    private void btnNewCredencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewCredencialActionPerformed
        AddNewCredenciales add_new_credencial = new AddNewCredenciales(parent, true);        
        // Localizacvión de la ventana        
        add_new_credencial.setLocationRelativeTo(this);
        // hace visible la ventana
        add_new_credencial.setVisible(true);        
        LlenaTabla();
        // cuando cierra la ventana agrega el pais a la tabla y lo selecciona
        UtilsTable.mueveTabla(tableList, UtilsTable.getRow(lista_credenciales, add_new_credencial.credencial_id));
    }//GEN-LAST:event_btnNewCredencialActionPerformed

    // Llena la tabla de paises cada que se escribe una letra
    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
        // Filtra paises  
        LlenaTabla();
    }//GEN-LAST:event_txtFiltroKeyReleased

    // Elimina al pais seleccionado de la tabla de PAIS
    private void btnDelCredencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelCredencialActionPerformed
        // Eliminar un registro
        // si no selecciona fila, le avisa al usuario
        if (tableList.getSelectedRow() < 0){
             // suena un beep
            java.awt.Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione una fila","Aviso", 2);
        }
        else{
            // suena un beep
            java.awt.Toolkit.getDefaultToolkit().beep();
            // pregunta si quiere eliminar el registro y camtura la respuesta
            int res = javax.swing.JOptionPane.showConfirmDialog(this, "¿Eliminar " + lista_credenciales[tableList.getSelectedRow()][1].toString() + "?",
                 "Seleccione", JOptionPane.YES_NO_OPTION);
            // evalua la respuesta 
            if (res == 0){
                String msj = "";
                // si la respuesta es afirmativa, elimina el registro
                int ret = credencial_dao.DeleteCredenciales((Integer) tableList.getValueAt(tableList.getSelectedRow(), 0));
                if (ret == 1){
                    msj = "No se pudo eliminar por que tiene registros asignados.";
                    javax.swing.JOptionPane.showMessageDialog(this, msj, "Información", 1);
                }                
                // Reinicia controles y parametros
                LlenaTabla();
            }
        }
    }//GEN-LAST:event_btnDelCredencialActionPerformed

    // Abre una ventana para poder editar a la credencial seleccionada
    private void btnEditCredencialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditCredencialActionPerformed
        // Botón que edita el registro seleccionado de la tabla
        if (tableList.getSelectedRow() < 0) {
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Seleccione una fila", "Información", 1);
        } else {
            credencial_id = (Integer) tableList.getValueAt(tableList.getSelectedRow(), 0);
            String fechaRenovacion = JOptionPane.showInputDialog(this, "Ingrese la nueva fecha de renovación (DD/MM/YY):");
            if (fechaRenovacion != null) {
                Object[] credencial_obj = new Object[2];
                credencial_obj[0] = credencial_id;
                credencial_obj[1] = fechaRenovacion;

                int result = credencial_dao.UpdateCredencial(credencial_obj);

                if (result > 0) {
                    JOptionPane.showMessageDialog(this, "Fecha de renovación actualizada correctamente.");
                    LlenaTabla();  // Actualiza la tabla después de la modificación
                } else {
                    JOptionPane.showMessageDialog(this, "Error al actualizar la fecha de renovación.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnEditCredencialActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelCredencial;
    private javax.swing.JButton btnEditCredencial;
    private javax.swing.JButton btnNewCredencial;
    private javax.swing.JLabel lblFiltro;
    private javax.swing.JPanel pnlTableList;
    private javax.swing.JScrollPane scpTableList;
    private javax.swing.JTable tableList;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}