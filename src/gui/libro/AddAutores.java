package gui.libro;

import dataBase.dao.AutorDAO;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import tools.UtilsTable;

/**
 * Ventana que permite agregar autores a un libro
 * @author alfonso
 */
public class AddAutores extends javax.swing.JDialog {
    String autorId;
    int libroId;
    AutorDAO autorDAO;
    
    // Para listar todos los autores 
    Object[][] autoresLista;
    java.awt.Frame parent;    

    /**
     * Creates new form AddAutores.
     * @param parent ventana padre.
     * @param modal determina si la ventana no cede el foco a otra.
     */
    public AddAutores(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        this.parent= parent;
        setTitle("Autores");
        
        // Inicia los componentes.
        initComponents();
        autorDAO = new AutorDAO();
        llenaTabla();
    }
    
    /**
     * Establece el Id del Libro siendo editado.
     * @param libroId Id del Libro siendo editado. 
     */
    public void setLibroId(int libroId) {   
        this.libroId = libroId;
        txtFiltro.setText("");
        llenaTabla();
    }
        
    /**
     * Llena y despliega la tabla de Autores.
     */
    private void llenaTabla() {     
        
        // Consulta todos los autores (id, nombre apellido).
        autoresLista = autorDAO.getAutoresByNombreApellido(txtFiltro.getText().trim());
        
        // Titulos de la tabla
        String[] columnasNombre = {"","Nombre"};
        
        // Alineación de las celdas.
        int[][] cellAlignment = {{0, javax.swing.SwingConstants.LEFT}};
        
        // Tamaño de las celdas.
        int[][] cellSize = {{0, 0}, {1, 170}};
       
        UtilsTable.llenaTabla(cellAlignment, cellSize, columnasNombre, tblAutores, autoresLista);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardar = new javax.swing.JButton();
        pnlTableList = new javax.swing.JPanel();
        scpTableList = new javax.swing.JScrollPane();
        tblAutores = new javax.swing.JTable();
        txtFiltro = new javax.swing.JTextField();
        lblFiltro = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage( getClass().getResource("/img/pen.png")));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/guardar.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar");
        btnGuardar.setFocusable(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        pnlTableList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 16))); // NOI18N
        pnlTableList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scpTableList.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scpTableList.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tblAutores.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tblAutores.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblAutores.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblAutoresMouseClicked(evt);
            }
        });
        scpTableList.setViewportView(tblAutores);

        pnlTableList.add(scpTableList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 180, 170));

        txtFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });
        pnlTableList.add(txtFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 140, 25));

        lblFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblFiltro.setText("Filtrar:");
        pnlTableList.add(lblFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 25));

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/add.png"))); // NOI18N
        btnNew.setToolTipText("Registrar nuevo autor");
        btnNew.setFocusable(false);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/borrar.png"))); // NOI18N
        btnDelete.setToolTipText("Borrar autor");
        btnDelete.setFocusable(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnEdit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/editar.png"))); // NOI18N
        btnEdit.setToolTipText("Editar autor");
        btnEdit.setFocusable(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Agrega a la tabla de Autoria al Autor seleccionado para el Libro actual.
     * @param evt evento que dispara la funcion.
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed

        // Verifica si se selecciono un elemento de la tabla.
        if(tblAutores.getSelectedRow() < 0) {
            
            // Suena un beep y muestra un mensaje
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(this, "Seleccione un autor", "Aviso", 2);            
        } else {      
            
            // Toma el id y guarda el Autor en a tabla de Autoria y guarda la Autoria.
            autorId = autoresLista[tblAutores.getSelectedRow()][0].toString();
            Object[] autoria = new Object[2];
            autoria[0] = autorId;
            autoria[1]= libroId;
            int result = autorDAO.saveAutoria(autoria);
            if(result == 0) {
                
                // Suena un beep y se muestra un mensaje de error.
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Error al guardar la autoria", "Error", 0);                                
            } else {
                
                // Cierra la ventana.
                txtFiltro.setText("");
                dispose(); 
            }               
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * Agrega al Autor selecciona a la Autoria al dar doble click en este.
     * @param evt evento que dispara la funcion.
     */
    private void tblAutoresMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblAutoresMouseClicked
        if(evt.getClickCount() == 2) {  
            btnGuardarActionPerformed(null);   
        }
    }//GEN-LAST:event_tblAutoresMouseClicked

    /**
     * Abre una ventana que posibilida crear un Autor.
     * @param evt evento que dispara la funcion.
     */
    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        AddNewAutor addNewAutor = new AddNewAutor(parent, true);        
        addNewAutor.setLocationRelativeTo(this);
        addNewAutor.setVisible(true);
        
        // Cuando cierra la ventana agrega el autor a la tabla y lo selecciona.
        llenaTabla();
        UtilsTable.mueveTabla(UtilsTable.getRow(addNewAutor.autorId, autoresLista), tblAutores);
    }//GEN-LAST:event_btnNewActionPerformed

    /**
     * Llena la tabla de Autores cada que se escribe una letra
     * @param evt evento que dispara la funcion.
     */
    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
        llenaTabla();
    }//GEN-LAST:event_txtFiltroKeyReleased

    /**
     * Elimina al Autor seleccionado de la tabla de Autor.
     * @param evt evento que dispara la funcion.
     */
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed

        // Si no selecciona fila, le avisa al usuario.
        if(tblAutores.getSelectedRow() < 0) {
            
            // Suena un beep y se muestra un mensaje.
            java.awt.Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione una fila","Aviso", 2);
        } else {
            
            // suena un beep y se muestra un mensaje de confirmacion.
            java.awt.Toolkit.getDefaultToolkit().beep();            
            int res = javax.swing.JOptionPane.showConfirmDialog(this, "¿Eliminar " + autoresLista[tblAutores.getSelectedRow()][1].toString() + "?",
                "Seleccione", JOptionPane.YES_NO_OPTION);

            // Si la respuesta es afirmativa, elimina el registro.
            if(res == 0) {
                String msj = "";
                int ret = autorDAO.deleteAutor(tblAutores.getValueAt(tblAutores.getSelectedRow(), 0).toString());
                if(ret != 1) {
                    msj = "No se pudo eliminar por que tiene registros asignados.";
                    javax.swing.JOptionPane.showMessageDialog(this, msj, "Información", 1);
                }                
                
                // Reinicia controles y parametros.
                llenaTabla();
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    /**
     * Abre una ventana para poder editar al Autor seleccionado.
     * @param evt evento que dispara la funcion.
     */
    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        if(tblAutores.getSelectedRow() < 0) {
            
            // Suena un beep y se muestra un mensaje
            Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione una fila", "Información", 1);
        } else {
            autorId = tblAutores.getValueAt(tblAutores.getSelectedRow(), 0).toString();
            
            // Abre la ventana para editar Autor
            AddNewAutor editAutor = new AddNewAutor(parent, true);                  
            editAutor.setEditId(autorId);
            editAutor.setLocationRelativeTo(this);            
            editAutor.setVisible(true);
            
            // Cuando cierra la ventana agrega el autor a la tabla y lo selecciona.
            llenaTabla();
            UtilsTable.mueveTabla(UtilsTable.getRow(editAutor.autorId, autoresLista), tblAutores);
        }
    }//GEN-LAST:event_btnEditActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNew;
    private javax.swing.JLabel lblFiltro;
    private javax.swing.JPanel pnlTableList;
    private javax.swing.JScrollPane scpTableList;
    private javax.swing.JTable tblAutores;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}