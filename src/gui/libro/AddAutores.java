package gui.libro;

import dataBase.dao.AutorDAO;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import tools.UtilsTable;

/**
 *
 * @author Alfonso
 * Ventana que permite agregar autores a un libro
 */
public class AddAutores extends javax.swing.JDialog {
    // Para agregar el autores a un libro
    String autor_id;
    int libro_id;
    AutorDAO autor_dao;
    // Para listar todos los autores 
    Object lista_autores [][];  // Id, nombre
   // public Object film[];
    java.awt.Frame parent;    

    /**
     * Creates new form ???
     * @param parent
     * @param modal
     */
    public AddAutores(java.awt.Frame parent, boolean modal) {
        // ventana modal
        super(parent, modal);   // Llama al constructor del padre
        this.parent= parent;
        setTitle("Autores");
        // inicia los componentes
        initComponents();
        // Crea el dao
        autor_dao = new AutorDAO();
        // llena la tabla
        LlenaTabla();
    }
    
    // Establece el Id del libro siendo editado
    public void SetLibroId(int id_libro) {   
        // Asigna el id del libro
        this.libro_id = id_libro;
        txtFiltro.setText("");
        LlenaTabla();
    }
    
    // Llena y despliega la tabla de autores 
    private void LlenaTabla() {     
        // Consulta todos los autores (id, nombre apellido)
        lista_autores = autor_dao.getAutoresByNombreApellido(txtFiltro.getText().trim());
        // Titulos de la tabla
        String[] T_AUTOR = {"","Nombre"};
        // alineación de las celdas
        int[][] cellAlignment = {{0,javax.swing.SwingConstants.LEFT}};
        // Tamaño de las celdas
        int[][] cellSize = {{0,0},
                            {1,170}};
       
        UtilsTable.llenaTabla(tableList,lista_autores, T_AUTOR, cellAlignment, cellSize);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardar = new javax.swing.JButton();
        pnlTableList = new javax.swing.JPanel();
        scpTableList = new javax.swing.JScrollPane();
        tableList = new javax.swing.JTable();
        txtFiltro = new javax.swing.JTextField();
        lblFiltro = new javax.swing.JLabel();
        btnNewAutor = new javax.swing.JButton();
        btnDelAutor = new javax.swing.JButton();
        btnEditAutor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage( getClass().getResource("/img/pen.png")));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/guardar.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar");
        btnGuardar.setFocusable(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        pnlTableList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 16))); // NOI18N
        pnlTableList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scpTableList.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scpTableList.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tableList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tableList.setModel(new javax.swing.table.DefaultTableModel(
            new Object[][] {

            },
            new String [] {

            }
        ));
        tableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableListMouseClicked(evt);
            }
        });
        scpTableList.setViewportView(tableList);

        pnlTableList.add(scpTableList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 180, 170));

        txtFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });
        pnlTableList.add(txtFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 140, 25));

        lblFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblFiltro.setText("Filtrar:");
        pnlTableList.add(lblFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 25));

        btnNewAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/add.png"))); // NOI18N
        btnNewAutor.setToolTipText("Registrar nuevo autor");
        btnNewAutor.setFocusable(false);
        btnNewAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAutorActionPerformed(evt);
            }
        });

        btnDelAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/borrar.png"))); // NOI18N
        btnDelAutor.setToolTipText("Borrar autor");
        btnDelAutor.setFocusable(false);
        btnDelAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelAutorActionPerformed(evt);
            }
        });

        btnEditAutor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/editar.png"))); // NOI18N
        btnEditAutor.setToolTipText("Editar autor");
        btnEditAutor.setFocusable(false);
        btnEditAutor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditAutorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNewAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(btnDelAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditAutor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Agrega a la tabla de AUTORIA al autor seleccionado para el libro actual
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Accion del boton aceptar
        // Verifica si se selecciono un elemento de la tabla
        if(tableList.getSelectedRow() < 0) {
            // Suena un beep
            Toolkit.getDefaultToolkit().beep();
            // Muestra un mensage de aviso
            JOptionPane.showMessageDialog(this, "Seleccione un autor", "Aviso", 2);            
        }
        else{      
            // Toma el id y guarda el autor en a tabla de autoria y guarda la autoria
            autor_id = lista_autores[tableList.getSelectedRow()][0].toString();
            Object[] autoria = new Object[2];            
            autoria[0] = autor_id;
            autoria[1]= libro_id;
            int result = autor_dao.saveAutoria(autoria);
            if(result == 0) {
                // Suena un beep
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Error al guardar la autoria", "Error", 0);                                
            }
            else{
                // Cierra la ventana
                txtFiltro.setText("");
                dispose(); 
            }               
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    // Agrega al autor selecciona a la AUTORIA al dar doble click en este
    private void tableListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableListMouseClicked
        /* 
            Cuando el usuario da doble click en una fila de la tabla hace la 
            misma acción del boton aceptar
        */
        if(evt.getClickCount() == 2) {  
            btnGuardarActionPerformed(null);   
        }
    }//GEN-LAST:event_tableListMouseClicked

    // Abre una ventana que posibilida crear un AUTOR
    private void btnNewAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAutorActionPerformed
        AddNewAutor add_new_autor = new AddNewAutor(parent, true);        
        // Localizacvión de la ventana        
        add_new_autor.setLocationRelativeTo(this);
        // hace visible la ventana
        add_new_autor.setVisible(true);        
        LlenaTabla();
        // cuando cierra la ventana agrega el autor a la tabla y lo selecciona
        UtilsTable.mueveTabla(tableList, UtilsTable.getRow(lista_autores, add_new_autor.autor_id));
    }//GEN-LAST:event_btnNewAutorActionPerformed

    // Llena la tabla de autores cada que se escribe una letra
    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
        // Filtra autores  
        LlenaTabla();
    }//GEN-LAST:event_txtFiltroKeyReleased

    // Elimina al autor seleccionado de la tabla de AUTOR
    private void btnDelAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelAutorActionPerformed
        // Eliminar un registro
        // si no selecciona fila, le avisa al usuario
        if(tableList.getSelectedRow() < 0) {
             // suena un beep
            java.awt.Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione una fila","Aviso", 2);
        }
        else{
            // suena un beep
            java.awt.Toolkit.getDefaultToolkit().beep();
            // pregunta si quiere eliminar el registro y camtura la respuesta
            int res = javax.swing.JOptionPane.showConfirmDialog(this, "¿Eliminar " + lista_autores[tableList.getSelectedRow()][1].toString() + "?",
                 "Seleccione", JOptionPane.YES_NO_OPTION);
            // evalua la respuesta 
            if(res == 0) {
                String msj = "";
                // si la respuesta es afirmativa, elimina el registro
                int ret = autor_dao.deleteAutor(tableList.getValueAt(tableList.getSelectedRow(), 0).toString());
                if(ret != 1) {
                    msj = "No se pudo eliminar por que tiene registros asignados.";
                    javax.swing.JOptionPane.showMessageDialog(this, msj,"Información",1);
                }                
                // Reinicia controles y parametros
                LlenaTabla();
            }
        }
    }//GEN-LAST:event_btnDelAutorActionPerformed

    // Abre una ventana para poder editar al autor seleccionado
    private void btnEditAutorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditAutorActionPerformed
        // Botón que edita el registro selecionado de la tabla
        if(tableList.getSelectedRow() < 0) {
            // Suena un beep
            Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione una fila", "Información", 1);
        }
        else{
            // Obtiene el id del autor seleccionado
            autor_id = tableList.getValueAt(tableList.getSelectedRow(), 0).toString();
            // Abre la ventana para editar autor
            // Ventana para editar autor
            AddNewAutor edit_autor = new AddNewAutor(parent, true);                  
            edit_autor.SetEditId(autor_id);

            // Localización de la ventana
            edit_autor.setLocationRelativeTo(this);            
            // hace visible la ventana
            edit_autor.setVisible(true);
            
            // cuando cierra la ventana agrega el autor a la tabla y lo selecciona
            LlenaTabla();
            UtilsTable.mueveTabla(tableList, UtilsTable.getRow(lista_autores, edit_autor.autor_id));
        }
    }//GEN-LAST:event_btnEditAutorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelAutor;
    private javax.swing.JButton btnEditAutor;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNewAutor;
    private javax.swing.JLabel lblFiltro;
    private javax.swing.JPanel pnlTableList;
    private javax.swing.JScrollPane scpTableList;
    private javax.swing.JTable tableList;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}