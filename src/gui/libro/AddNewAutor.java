package gui.libro;

import dataBase.dao.AutorDAO;
import dataBase.dao.PaisDAO;
import java.awt.Toolkit;
import java.awt.event.WindowEvent;
import javax.swing.JOptionPane;

/**
 * Ventana que permite agregar y editar Autores.
 * @author alfonso
 */
public class AddNewAutor extends javax.swing.JDialog {
    String autorId;
    String pais;
    AutorDAO autorDAO;
    PaisDAO paisDAO;

    /**
     * Creates new form AddNewAutor.
     * @param parent ventana padre.
     * @param modal determina si la ventana no cede el foco a otra.
     */
    public AddNewAutor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        getRootPane().setDefaultButton(btnGuardar);
        
        // Inicia los componentes.
        initComponents();
        processWindowEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        autorDAO = new AutorDAO();                       
        
        // Popula el ComboBox de paises disponibles.
        paisDAO = new PaisDAO();    
        Object[][] allPaises = paisDAO.getAllPaises();        
        for(Object[] pais : allPaises) {             
            cmbPaises.addItem(pais[1].toString());
        }        
    }

    /**
     * Borra los controles.
     */    
    private void borrarTextos() {
        txtNombre.setText("");
        txtApellido.setText("");
        cmbPaises.setSelectedIndex(-1);
    }
    
    /**
     * Revisa si todos los campos estan llenos.
     * @return boolean indicando si todos los campos estan llenos.
     */
    private boolean estanLlenos() {
        boolean llenos;
        if(txtNombre.getText().trim().length() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Introduzca el nombre.", "Aviso", 2);
            txtNombre.requestFocus();
            llenos = false;
        } else if(txtApellido.getText().trim().length() == 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Introduzca el apellido.", "Aviso", 2);
            txtApellido.requestFocus();
            llenos = false;
        } else if(cmbPaises.getSelectedIndex() < 0) {
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione un pais de origen.", "Aviso", 2);
            cmbPaises.requestFocus();
            llenos = false;
        } else {
            llenos = true;
        }
        return llenos;
    }
    
    /**
     * Llena los datos del autor a editar.
     * @param autorId Id del autor siendo editado.
     */
    public void setEditId(String autorId) {
        this.autorId = autorId;
        
        // Busca el autor y muestra los datos en los controles.
        Object[] autor_edit = autorDAO.getAutorById(autorId);
        txtNombre.setText(autor_edit[1].toString());
        if(autor_edit[2] != null) {
            txtApellido.setText(autor_edit[2].toString());
        }                   
        if(autor_edit[3] != null) {
            cmbPaises.setSelectedItem(autor_edit[3].toString()); 
        }                   
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlTableList = new javax.swing.JPanel();
        txtNombre = new javax.swing.JTextField();
        lblNombre = new javax.swing.JLabel();
        lblApellido = new javax.swing.JLabel();
        txtApellido = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        lblNombre1 = new javax.swing.JLabel();
        cmbPaises = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Autor");
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage( getClass().getResource("/img/user_icon.png")));

        pnlTableList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 16))); // NOI18N
        pnlTableList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtNombre.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlTableList.add(txtNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 60, 140, 25));

        lblNombre.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblNombre.setText("Nombre:");
        pnlTableList.add(lblNombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, 25));

        lblApellido.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblApellido.setText("Apellido:");
        pnlTableList.add(lblApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, -1, 25));

        txtApellido.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        pnlTableList.add(txtApellido, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 100, 140, 25));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/guardar.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar");
        btnGuardar.setFocusable(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        pnlTableList.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 40, 40));

        lblNombre1.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblNombre1.setText("Pais:");
        pnlTableList.add(lblNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, 25));

        cmbPaises.setFont(new java.awt.Font("C059", 0, 12)); // NOI18N
        pnlTableList.add(cmbPaises, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 150, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTableList, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Crea un registro en la tabla Autor con los datos proporcionados.
     * @param evt evento que dispara la funcion.
     */
    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        
        // Revisa que todos los campos estan llenos.
        if(estanLlenos()) {
            pais = cmbPaises.getSelectedItem().toString();
            
            // Guarda o actualiza un autor
            if(autorId == null) { 
               Object[] autor = new Object[3];
                autor[0] = txtNombre.getText().trim();
                autor[1] = txtApellido.getText().trim();
                autor[2] = paisDAO.getPaisesByNombre(pais)[0][0];
                autorId = autorDAO.saveAutor(autor);
            } else { 
               Object[] autor = new Object[4];
                autor[0] = autorId;
                autor[1] = txtNombre.getText().trim();
                autor[2] = txtApellido.getText().trim();
                autor[3] = paisDAO.getPaisesByNombre(pais)[0][0];
                autorId =  autorDAO.updateAutor(autor);
            }

            if(autorId == null) {
              
                // Suena un beep y se muestra un mensaje de error.
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Error al guardar el autor", "Error", 0);                
            } else {
                borrarTextos();
                autorId = null;
                dispose();
            }  
        }                         
    }//GEN-LAST:event_btnGuardarActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JComboBox<String> cmbPaises;
    private javax.swing.JLabel lblApellido;
    private javax.swing.JLabel lblNombre;
    private javax.swing.JLabel lblNombre1;
    private javax.swing.JPanel pnlTableList;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}