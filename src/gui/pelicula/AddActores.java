package gui.pelicula;

import dataBase.dao.DaoActor;
import java.awt.Toolkit;
import javax.swing.JOptionPane;
import tools.UtilsTable;

/**
 *
 * @author Carlos
 * Ventana que permite agregar paliculas a la renta
 */
public class AddActores extends javax.swing.JDialog {
    // Para agregar el reparto a la pelicula
    String idActor;
    String idFilm;
    DaoActor daoActor;
    // Para listar todos los actores 
    Object actorsLista [][];
   // public Object film[];
    java.awt.Frame parent;    

    /**
     * Creates new form AddPeliculasRentaD
     * @param parent
     * @param modal
     */
    public AddActores(java.awt.Frame parent, boolean modal) {
        // ventana modal
        super(parent, modal);   // Llama al constructor del padre
        this.parent= parent;
        setTitle("Actores");
        // inicia los componentes
        initComponents();
        // Crea el dao
        daoActor = new DaoActor();
        // llena la tabla
        llenaTabla();
    }
    
    public void setIdFilm(String idFilm){   
        // Asigna el id de la pelicula
        this.idFilm = idFilm;
        txtFiltro.setText("");
        llenaTabla();
    }
    
    private void llenaTabla(){     
        // Consulta las peliculas y lo guardaen un arreglo
        actorsLista = daoActor.getActorsByFirstLastName(txtFiltro.getText().trim());
        // Titulos de la tabla
        String[] T_ACTOR = {"","Nombre"};
        // alineación de las celdas
        int[][] cellAlignment = {{0,javax.swing.SwingConstants.LEFT}};
        // Tamaño de las celdas
        int[][] cellSize = {{0,0},
                            {1,170}};
        /*
            Metodo que llena las tablas, recibe la tabla, los datos, los titulos,
            la alineación y el tamaño de las celdas
        */
       
        UtilsTable.llenaTabla(tableList,actorsLista, T_ACTOR, cellAlignment, cellSize);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGuardar = new javax.swing.JButton();
        pnlTableList = new javax.swing.JPanel();
        scpTableList = new javax.swing.JScrollPane();
        tableList = new javax.swing.JTable();
        txtFiltro = new javax.swing.JTextField();
        lblFiltro = new javax.swing.JLabel();
        btnNewActor = new javax.swing.JButton();
        btnDelActor = new javax.swing.JButton();
        btnEditActor = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(java.awt.Toolkit.getDefaultToolkit().getImage( getClass().getResource("/img/actor.png")));

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/guardar.png"))); // NOI18N
        btnGuardar.setToolTipText("Guardar");
        btnGuardar.setFocusable(false);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        pnlTableList.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Arial", 0, 16))); // NOI18N
        pnlTableList.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scpTableList.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        scpTableList.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        tableList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        tableList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableListMouseClicked(evt);
            }
        });
        scpTableList.setViewportView(tableList);

        pnlTableList.add(scpTableList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 180, 170));

        txtFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        txtFiltro.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtFiltroKeyReleased(evt);
            }
        });
        pnlTableList.add(txtFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 10, 140, 25));

        lblFiltro.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        lblFiltro.setText("Filtrar:");
        pnlTableList.add(lblFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, 25));

        btnNewActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/add.png"))); // NOI18N
        btnNewActor.setToolTipText("Registrar nuevo actor");
        btnNewActor.setFocusable(false);
        btnNewActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActorActionPerformed(evt);
            }
        });

        btnDelActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/borrar.png"))); // NOI18N
        btnDelActor.setToolTipText("Borrar actor");
        btnDelActor.setFocusable(false);
        btnDelActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelActorActionPerformed(evt);
            }
        });

        btnEditActor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Acciones/editar.png"))); // NOI18N
        btnEditActor.setToolTipText("Editar actor");
        btnEditActor.setFocusable(false);
        btnEditActor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnNewActor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditActor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(btnDelActor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlTableList, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewActor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelActor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditActor, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // Accion del boton aceptar
        // Verifica si se selecciono un elemento de la tabla
        if (tableList.getSelectedRow() < 0){
            // Suena un beep
            Toolkit.getDefaultToolkit().beep();
            // Muestra un mensage de aviso
            JOptionPane.showMessageDialog(this, "Seleccione un actor.", "Aviso",2);            
        }
        else{      
            // Toma el id y guarda el actor en a tabla de casting y guarda el casting
            idActor = actorsLista[tableList.getSelectedRow()][0].toString();
            Object[] cast = new Object[2];
            cast[0]= idFilm;
            cast [1] = idActor;
            int result = daoActor.saveCasting(cast);
            if (result == 0){
                // Suena un beep
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(this, "Error al guardar el reparto. ", "Error",0);                                
            }
            else{
                // Cierra la ventana
                txtFiltro.setText("");
                dispose(); 
            }               
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    private void tableListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableListMouseClicked
        /* 
            Cuando el usuario da doble click en una fila de la tabla hace la 
            misma acción del boton aceptar
        */
        if (evt.getClickCount() == 2){  
            btnGuardarActionPerformed(null);   
        }
    }//GEN-LAST:event_tableListMouseClicked

    private void btnNewActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActorActionPerformed
        // Abre la ventana para agregar actor
        // Ventana para agregar o editar actor
        AddNewActor addNewActor = new AddNewActor(parent, true);        
        // Localizacvión de la ventana        
        addNewActor.setLocationRelativeTo(this);
        // hace visible la ventana
        addNewActor.setVisible(true);        
        llenaTabla();
        // cuando cierra la ventana agrega el actor a la tabla y lo selecciona
        UtilsTable.mueveTabla(tableList, UtilsTable.getRow(actorsLista, addNewActor.idActor));
    }//GEN-LAST:event_btnNewActorActionPerformed

    private void txtFiltroKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltroKeyReleased
        // Filtra actores  
        llenaTabla();
    }//GEN-LAST:event_txtFiltroKeyReleased

    private void btnDelActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelActorActionPerformed
        // Eliminar un registro
        // si no selecciona fila, le avisa al usuario
        if (tableList.getSelectedRow() < 0){
             // suena un beep
            java.awt.Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione una fila.","Aviso",2);
        }
        else{
            // suena un beep
            java.awt.Toolkit.getDefaultToolkit().beep();
            // pregunta si quiere eliminar el registro y camtura la respuesta
            int res = javax.swing.JOptionPane.showConfirmDialog(this, "¿Eliminar " + actorsLista[tableList.getSelectedRow()][1].toString() + "?",
                 "Seleccione", JOptionPane.YES_NO_OPTION);
            // evalua la respuesta 
            if (res == 0){
                String msj = "";
                // si la respuesta es afirmativa, elimina el registro
                int ret = daoActor.delete(tableList.getValueAt(tableList.getSelectedRow(), 0).toString());
                if (ret == 1){
                    msj = "No se pudo eliminar por que tiene registros asignados.";
                    javax.swing.JOptionPane.showMessageDialog(this, msj,"Información",1);
                }                
                // Reinicia controles y parametros
                llenaTabla();
            }
        }
    }//GEN-LAST:event_btnDelActorActionPerformed

    private void btnEditActorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActorActionPerformed
        // Botón que edita el registro selecionado de la tabla
        if (tableList.getSelectedRow() < 0){
            // Suena un beep
            Toolkit.getDefaultToolkit().beep();
            javax.swing.JOptionPane.showMessageDialog(this, "Seleccione una fila.","Información",1);
        }
        else{
            // Obtiene el id del actor seleccionado
            idActor = tableList.getValueAt(tableList.getSelectedRow(), 0).toString();
            // Abre la ventana para editar actor
            // Ventana para editar actor
            AddNewActor editActor = new AddNewActor(parent, true);        
            // Localización de la ventana
            editActor.setLocationRelativeTo(this);            
            editActor.setEditId(idActor);
            // hace visible la ventana
            editActor.setVisible(true);
            llenaTabla();
            // cuando cierra la ventana agrega el actor a la tabla y lo selecciona
            UtilsTable.mueveTabla(tableList, UtilsTable.getRow(actorsLista, editActor.idActor));
        }
    }//GEN-LAST:event_btnEditActorActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelActor;
    private javax.swing.JButton btnEditActor;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNewActor;
    private javax.swing.JLabel lblFiltro;
    private javax.swing.JPanel pnlTableList;
    private javax.swing.JScrollPane scpTableList;
    private javax.swing.JTable tableList;
    private javax.swing.JTextField txtFiltro;
    // End of variables declaration//GEN-END:variables
}